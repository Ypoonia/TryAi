{
  "info": {
    "name": "Store Monitoring API - Enhanced",
    "description": "Enhanced Store Monitoring System with idempotent report generation and proper error handling",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "2.0.0"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8001",
      "type": "string",
      "description": "Base URL for the Store Monitoring API"
    },
    {
      "key": "reportId",
      "value": "",
      "type": "string",
      "description": "Current report ID for testing"
    }
  ],
  "item": [
    {
      "name": "1. Health Check",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has status healthy', function () {",
              "    const response = pm.response.json();",
              "    pm.expect(response.status).to.eql('healthy');",
              "});",
              "",
              "console.log('‚úÖ Health check passed - server is running!');"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/health/",
          "host": ["{{baseUrl}}"],
          "path": ["health", ""]
        },
        "description": "Check if the server is running and healthy"
      },
      "response": []
    },
    {
      "name": "2. Trigger Report (New)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200 or 202', function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 202]);",
              "});",
              "",
              "pm.test('Response has report_id', function () {",
              "    const response = pm.response.json();",
              "    pm.expect(response).to.have.property('report_id');",
              "    pm.expect(response).to.have.property('status');",
              "    pm.expect(response).to.have.property('message');",
              "});",
              "",
              "pm.test('Has Retry-After header', function () {",
              "    pm.expect(pm.response.headers.get('Retry-After')).to.exist;",
              "});",
              "",
              "// Save report ID for subsequent requests",
              "if (pm.response.code === 202 || pm.response.code === 200) {",
              "    const response = pm.response.json();",
              "    pm.collectionVariables.set('reportId', response.report_id);",
              "    console.log('üìù Report ID saved:', response.report_id);",
              "    console.log('üìä Status:', response.status);",
              "    console.log('üí¨ Message:', response.message);",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{}"
        },
        "url": {
          "raw": "{{baseUrl}}/reports/trigger_report",
          "host": ["{{baseUrl}}"],
          "path": ["reports", "trigger_report"]
        },
        "description": "Trigger a new report generation (idempotent - returns existing if already running)"
      },
      "response": []
    },
    {
      "name": "3. Get Report Status (Auto ID)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has required fields', function () {",
              "    const response = pm.response.json();",
              "    pm.expect(response).to.have.property('report_id');",
              "    pm.expect(response).to.have.property('status');",
              "});",
              "",
              "const response = pm.response.json();",
              "console.log('üìä Report Status:', response.status);",
              "",
              "if (response.status === 'COMPLETED') {",
              "    pm.test('Completed report has URL', function () {",
              "        pm.expect(response).to.have.property('url');",
              "    });",
              "    console.log('üéâ Report completed! URL:', response.url);",
              "} else if (response.status === 'RUNNING' || response.status === 'PENDING') {",
              "    pm.test('Active report has Retry-After header', function () {",
              "        pm.expect(pm.response.headers.get('Retry-After')).to.exist;",
              "    });",
              "    console.log('‚è≥ Report still processing... Check again in', pm.response.headers.get('Retry-After'), 'seconds');",
              "} else if (response.status === 'FAILED') {",
              "    console.log('‚ùå Report failed');",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/reports/get_report/{{reportId}}",
          "host": ["{{baseUrl}}"],
          "path": ["reports", "get_report", "{{reportId}}"]
        },
        "description": "Get status of the report using saved report ID"
      },
      "response": []
    },
    {
      "name": "4. Test Idempotent Trigger",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200 (existing report)', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Returns existing report info', function () {",
              "    const response = pm.response.json();",
              "    pm.expect(response.message).to.include('already in progress');",
              "});",
              "",
              "console.log('‚úÖ Idempotent behavior verified - returns existing report');"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{}"
        },
        "url": {
          "raw": "{{baseUrl}}/reports/trigger_report",
          "host": ["{{baseUrl}}"],
          "path": ["reports", "trigger_report"]
        },
        "description": "Test idempotent behavior - should return existing report if one is active"
      },
      "response": []
    },
    {
      "name": "5. Test Invalid Report ID",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 404', function () {",
              "    pm.response.to.have.status(404);",
              "});",
              "",
              "pm.test('Returns proper error message', function () {",
              "    const response = pm.response.json();",
              "    pm.expect(response).to.have.property('detail');",
              "    pm.expect(response.detail).to.include('not found');",
              "});",
              "",
              "console.log('‚úÖ Error handling verified - proper 404 for invalid ID');"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/reports/get_report/invalid-report-id-12345",
          "host": ["{{baseUrl}}"],
          "path": ["reports", "get_report", "invalid-report-id-12345"]
        },
        "description": "Test error handling with invalid report ID"
      },
      "response": []
    },
    {
      "name": "6. Manual Report Status Check",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// This is for manual testing with specific report IDs",
              "if (pm.response.code === 200) {",
              "    const response = pm.response.json();",
              "    console.log('üìä Report Status:', response.status);",
              "    if (response.url) {",
              "        console.log('üîó Download URL:', response.url);",
              "    }",
              "} else if (pm.response.code === 404) {",
              "    console.log('‚ùå Report not found');",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/reports/get_report/PASTE_REPORT_ID_HERE",
          "host": ["{{baseUrl}}"],
          "path": ["reports", "get_report", "PASTE_REPORT_ID_HERE"]
        },
        "description": "Manual test - replace PASTE_REPORT_ID_HERE with actual report ID"
      },
      "response": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "console.log('üöÄ Store Monitoring API Test - Enhanced Version');",
          "console.log('Base URL:', pm.collectionVariables.get('baseUrl'));"
        ]
      }
    }
  ]
}
